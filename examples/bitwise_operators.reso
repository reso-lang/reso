def main() -> i32:
    println("=== Bitwise Operators in Reso ===")
    
    # Basic Bitwise Operations
    println("=== Basic Bitwise Operations ===")
    
    var a: u8 = 0b1100_1010             # 202 in decimal
    var b: u8 = 0b1010_1111             # 175 in decimal
    
    println("a = ".append(a.to_string()).append(" (binary: 11001010)"))
    println("b = ".append(b.to_string()).append(" (binary: 10101111)"))
    
    # Bitwise AND (&)
    var and_result = a & b              # 0b1000_1010 = 138
    println("a & b = ".append(and_result.to_string()).append(" (binary: 10001010)"))
    
    # Bitwise OR (|)
    var or_result = a | b               # 0b1110_1111 = 239
    println("a | b = ".append(or_result.to_string()).append(" (binary: 11101111)"))
    
    # Bitwise XOR (^)
    var xor_result = a ^ b              # 0b0110_0101 = 101
    println("a ^ b = ".append(xor_result.to_string()).append(" (binary: 01100101)"))
    
    # Bitwise NOT (~)
    var not_a = ~a                      # 0b0011_0101 = 53
    var not_b = ~b                      # 0b0101_0000 = 80
    println("~a = ".append(not_a.to_string()).append(" (binary: 00110101)"))
    println("~b = ".append(not_b.to_string()).append(" (binary: 01010000)"))
    
    # Shift Operations
    println("=== Shift Operations ===")
    
    var value: u8 = 0b0001_1100         # 28 in decimal
    println("Original value: ".append(value.to_string()).append(" (binary: 00011100)"))
    
    # Left shift (<<)
    var left_shift_1 = value << 1       # 0b0011_1000 = 56
    var left_shift_2 = value << 2       # 0b0111_0000 = 112
    var left_shift_3 = value << 3       # 0b1110_0000 = 224
    
    println("value << 1 = ".append(left_shift_1.to_string()).append(" (binary: 00111000)"))
    println("value << 2 = ".append(left_shift_2.to_string()).append(" (binary: 01110000)"))
    println("value << 3 = ".append(left_shift_3.to_string()).append(" (binary: 11100000)"))
    
    # Right shift (>>)
    var right_shift_1 = value >> 1      # 0b0000_1110 = 14
    var right_shift_2 = value >> 2      # 0b0000_0111 = 7
    var right_shift_3 = value >> 3      # 0b0000_0011 = 3
    
    println("value >> 1 = ".append(right_shift_1.to_string()).append(" (binary: 00001110)"))
    println("value >> 2 = ".append(right_shift_2.to_string()).append(" (binary: 00000111)"))
    println("value >> 3 = ".append(right_shift_3.to_string()).append(" (binary: 00000011)"))