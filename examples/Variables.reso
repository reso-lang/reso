def main() -> i32:
    # Mutable variables (can be reassigned)
    var counter: i32 = 0             # Explicit type annotation
    var message = "Hello, World!"    # Type inferred as String
    var temperature = 23.5           # Type inferred as f64
    var isActive = true             # Type inferred as bool

    # Immutable variables (cannot be reassigned)
    const pi = 3.14159               # Mathematical constant, type inferred as f64
    const maxUsers = 100            # Configuration value, type inferred as i32
    const appName = "resoApp"       # Type inferred as String

    # Variables must be initialized upon declaration
    var initializedVar: i32 = 42   # Valid: initialized with value
    # var uninitialized: i32        # Error: variables must be initialized

    # Demonstrate mutable variable reassignment
    println("Initial counter: ".append(counter.toString()))
    counter = counter + 1
    counter = 5
    println("Updated counter: ".append(counter.toString()))

    # Demonstrate mutable variable type consistency
    message = "Goodbye, World!"     # Valid: same type (String)
    # message = 123                 # Error: cannot assign i32 to String

    # Show that constants cannot be reassigned
    println("Pi value: ".append(pi.toString()))
    # pi = 3.14                     # Error: constants cannot be reassigned

    # Different variable scopes
    if true:
        var localVar: i32 = 10     # Variable local to this block
        const localConst = "Block" # Constant local to this block
        var counter: i32 = 20       # Shadows outer counter variable

        println("Local variable: ".append(localVar.toString()))
        println("Local constant: ".append(localConst))
        println("Shadowed counter: ".append(counter.toString()))

        # Can access outer scope variables
        println("Outer variable: ".append(message))
        println("Outer constant: ".append(appName))

    # localVar is not accessible here (out of scope)
    # println(localVar.toString()) # Error: localVar not in scope

    # Complex type examples
    var numbers: Vector<i32> = Vector()
    const defaultSettings = "production"

    # Variables can be used in expressions
    var result: i32 = counter * 2 + maxUsers

    println("Result: ".append(result.toString()))
    println("App: ".append(appName))